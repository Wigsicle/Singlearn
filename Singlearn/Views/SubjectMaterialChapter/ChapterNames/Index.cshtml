@model IEnumerable<Singlearn.Models.Entities.ChapterName>

@{
    Layout = "~/Views/Shared/_LayoutStaff.cshtml";
    ViewData["Title"] = "Chapter Names";

    var chapterNames = Model.ToList();
}

<body>
    <div class="container-fluid" style="padding:20% 3% 3% 5%;">
        <div class="row">
            <!-- Main Content: Table and Pagination -->
            <div class="col-lg-12 pt-3">
                <h1>List of Chapter Names</h1>

                <div class="form-group pt-3 pb-3">
                    <input type="text" class="form-control" id="searchInput" placeholder="Search for chapter names...">
                </div>

                <a asp-action="CreateChapterName" class="btn btn-primary mb-3">Create Chapter Name</a>

                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="chapterNamesTable">
                        <thead class="thead-dark">
                            <tr>
                                <th>@Html.DisplayNameFor(model => model.name)</th>
                                <th class="col-id">@Html.DisplayNameFor(model => model.chapter_id)</th>
                                <th class="col-id">@Html.DisplayNameFor(model => model.subject_id)</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.name)</td>
                                    <td>@Html.DisplayFor(modelItem => item.chapter_id)</td>
                                    <td>@Html.DisplayFor(modelItem => item.subject_id)</td>
                                    <td>
                                        <a asp-action="DetailsChapterName" asp-controller="SubjectMaterialChapter" asp-route-id="@item.chapter_name_id"><i class="fa fa-eye text-primary"></i></a> |
                                        <a asp-action="EditChapterName" asp-controller="SubjectMaterialChapter" asp-route-id="@item.chapter_name_id"><i class="fa fa-pencil text-warning"></i></a> |
                                        <a asp-action="DeleteChapterName" asp-controller="SubjectMaterialChapter" asp-route-id="@item.chapter_name_id"><i class="fa fa-trash text-danger"></i></a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <!-- End of table -->
                <!-- Pagination -->
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center" id="pagination">
                        <li class="page-item" id="previousPage">
                            <a class="page-link" href="" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                                <span class="sr-only">Previous</span>
                            </a>
                        </li>
                        <!-- Pagination Links will be dynamically added here -->
                        <li class="page-item" id="nextPage">
                            <a class="page-link" href="" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                                <span class="sr-only">Next</span>
                            </a>
                        </li>
                    </ul>
                </nav>
                <!-- End of Pagination -->
            </div>
            <!-- End of Main Content -->
        </div>
    </div>
</body>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var chapterNames = @Html.Raw(Json.Serialize(Model));
            var currentPage = 1;
            var rowsPerPage = 10;

            function updateTable(page) {
                var startIndex = (page - 1) * rowsPerPage;
                var endIndex = startIndex + rowsPerPage;
                var slicedChapterNames = chapterNames.slice(startIndex, endIndex);

                updateTableContent(slicedChapterNames);
            }

            function updateTableContent(filteredChapterNames) {
                var tableBody = document.querySelector("#chapterNamesTable tbody");
                tableBody.innerHTML = "";

                filteredChapterNames.forEach(function (item) {
                    var row = `
                                        <tr>
                                            <td>${item.name}</td>
                                            <td>${item.chapter_id}</td>
                                            <td>${item.subject_id}</td>
                                            <td>
                                                <a href="/ChapterNames/Details/${item.chapter_name_id}"><i class="fa fa-eye text-primary"></i></a> |
                                                <a href="/ChapterNames/Edit/${item.chapter_name_id}"><i class="fa fa-pencil text-warning"></i></a> |
                                                <a href="/ChapterNames/Delete/${item.chapter_name_id}"><i class="fa fa-trash text-danger"></i></a>
                                            </td>
                                        </tr>`;
                    tableBody.innerHTML += row;
                });

                // Update pagination after updating table content
                updatePagination(filteredChapterNames.length);
            }

            function updatePagination() {
                var totalPages = Math.ceil(chapterNames.length / rowsPerPage);
                var paginationElement = document.getElementById("pagination");
                paginationElement.innerHTML = "";

                var previousLi = `<li class="page-item" id="previousPage">
                                                    <a class="page-link" href="" aria-label="Previous">
                                                        <span aria-hidden="true">&laquo;</span>
                                                        <span class="sr-only">Previous</span>
                                                    </a>
                                                  </li>`;
                paginationElement.innerHTML += previousLi;

                for (var i = 1; i <= totalPages; i++) {
                    var li = `<li class="page-item"><a class="page-link" href="">${i}</a></li>`;
                    paginationElement.innerHTML += li;
                }

                var nextLi = `<li class="page-item" id="nextPage">
                                                <a class="page-link" href="" aria-label="Next">
                                                    <span aria-hidden="true">&raquo;</span>
                                                    <span class="sr-only">Next</span>
                                                </a>
                                              </li>`;
                paginationElement.innerHTML += nextLi;

                var pageLinks = document.querySelectorAll("#pagination .page-link");

                pageLinks.forEach(function (pageLink, index) {
                    if (index === 0) {
                        pageLink.addEventListener("click", function (event) {
                            event.preventDefault();
                            if (currentPage > 1) {
                                currentPage--;
                                updateTable(currentPage);
                            }
                        });
                    } else if (index === pageLinks.length - 1) {
                        pageLink.addEventListener("click", function (event) {
                            event.preventDefault();
                            if (currentPage < totalPages) {
                                currentPage++;
                                updateTable(currentPage);
                            }
                        });
                    } else {
                        pageLink.addEventListener("click", function (event) {
                            event.preventDefault();
                            currentPage = parseInt(pageLink.textContent);
                            updateTable(currentPage);
                        });
                    }
                });
            }

            // Search bar functionality
            document.getElementById('searchInput').addEventListener('input', function () {
                var filter = this.value.toLowerCase();
                var rows = document.querySelectorAll("#chapterNamesTable tbody tr");

                rows.forEach(function (row) {
                    var text = row.textContent.toLowerCase();
                    if (text.includes(filter)) {
                        row.style.display = "";
                    } else {
                        row.style.display = "none";
                    }
                });
            });

            // Initial setup
            updateTable(currentPage);
            updatePagination();
        });
    </script>
}

<style>
    .col-id {
        width: 5%;
    }
</style>

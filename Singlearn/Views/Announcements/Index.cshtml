@model List<Singlearn.ViewModels.AnnouncementViewModel>

@{
    Layout = "~/Views/Shared/_LayoutFixed2.cshtml";
    ViewData["Title"] = "Index";

    var categories = Model.Select(m => m.Category).Distinct().OrderBy(category => category).ToList();
    var statuses = Model.Select(m => m.Status).Distinct().OrderBy(status => status).ToList();
}
@inject IHttpContextAccessor HTTPCONTEXTACCESSOR;
@{
    var staffId = HTTPCONTEXTACCESSOR.HttpContext.Session.GetString("staff_id");
}

<body>
    <div style="padding:8% 3% 3% 3%;">
        <div class="row">
            <!-- Filter Panel: Side Panel -->
            @* <div class="mt-3 col-lg-2">
            <div class="form-group pt-3 pb-3">
            <button class="btn btn-secondary" id="clearFiltersBtn">Clear Filters</button>
            </div>
            <!-- Category -->
            <div class="card mb-2">
            <div class="card-body">
            <h5 class="card-title">Category</h5>
            @foreach (var category in categories)
            {
            <div class="form-check">
            <input class="form-check-input category-filter" type="checkbox" value="@category" id="@category">
            <label class="form-check-label" for="@category">
            @category
            </label>
            </div>
            }
            </div>
            </div>

            <!-- Status -->
            <div class="card mb-2">
            <div class="card-body">
            <h5 class="card-title">Status</h5>
            @foreach (var status in statuses)
            {
            <div class="form-check">
            <input class="form-check-input status-filter" type="checkbox" value="@status" id="@status">
            <label class="form-check-label" for="@status">
            @status
            </label>
            </div>
            }
            </div>
            </div>
            </div> *@

            <!-- End of Filter Panel -->
            <!-- Main Content: Table and Pagination -->
            <div class="col-lg-12 pt-3">
                <h1>List of Announcements</h1>

                <!--Alert box-->
                <div id="alert-message" class="alert alert-dismissible fade show mt-3 mb-3" role="alert" style="display:none;">
                    <span id="alert-text"></span>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>

                <!--Search Box-->
                <div class="form-group pt-3 pb-3">
                    <input type="text" class="form-control" id="searchInput" placeholder="Search for announcements...">
                </div>

                <a asp-action="Create" class="btn btn-primary mb-3">Create Announcement</a>

                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="announcementsTable">
                        <thead class="thead-dark">
                            <tr>
                                <th>@Html.DisplayNameFor(model => model[0].AnnouncementId)</th>
                                <th>@Html.DisplayNameFor(model => model[0].SubjectId)</th>
                                <th>@Html.DisplayNameFor(model => model[0].StaffId)</th>
                                <th>@Html.DisplayNameFor(model => model[0].ClassId)</th>
                                <th>@Html.DisplayNameFor(model => model[0].Title)</th>
                                <th>@Html.DisplayNameFor(model => model[0].Description)</th>
                                <th>@Html.DisplayNameFor(model => model[0].Image)</th>
                                <th>@Html.DisplayNameFor(model => model[0].Date)</th>
                                <th>@Html.DisplayNameFor(model => model[0].Url)</th>
                                <th>@Html.DisplayNameFor(model => model[0].Category)</th>
                                <th>@Html.DisplayNameFor(model => model[0].Status)</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.AnnouncementId</td>
                                    <td>@item.SubjectId</td>
                                    <td>@item.StaffId</td>
                                    <td>@item.ClassId</td>
                                    <td>@item.Title</td>
                                    <td>@item.Description</td>
                                    <td>@item.Image</td>
                                    <td>@item.Date</td>
                                    <td>@item.Url</td>
                                    <td>@item.Category</td>
                                    <td>@item.Status</td>
                                    <td>
                                        <a asp-action="Details" asp-route-id="@item.AnnouncementId" asp-route-teacherId="@staffId"><i class="fa fa-eye text-primary"></i>Details</a> |
                                        <a asp-action="Edit" asp-route-id="@item.AnnouncementId"><i class="fa fa-pencil text-warning"></i>Edit</a> |
                                        <a asp-action="Delete" asp-route-id="@item.AnnouncementId"><i class="fa fa-trash text-danger"></i>Delete</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <!-- End of table -->
                <!-- Pagination -->
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center" id="pagination">
                        <li class="page-item" id="previousPage">
                            <a class="page-link" href="" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                                <span class="sr-only">Previous</span>
                            </a>
                        </li>
                        <!-- Pagination Links will be dynamically added here -->
                        <li class="page-item" id="nextPage">
                            <a class="page-link" href="" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                                <span class="sr-only">Next</span>
                            </a>
                        </li>
                    </ul>
                </nav>
                <!-- End of Pagination -->
            </div>
            <!-- End of Main Content -->
        </div>
    </div>
</body>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.0-beta3/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var announcements = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
            var currentPage = 1;
            var rowsPerPage = 10;
            var successMessage = '@TempData["SuccessMessage"]';
            var errorMessage = '@TempData["ErrorMessage"]';

            if (successMessage) {
                showAlert('success', successMessage);
            } else if (errorMessage) {
                showAlert('danger', errorMessage);
            }

            function showAlert(type, message) {
                var alertBox = document.getElementById('alert-message');
                var alertText = document.getElementById('alert-text');
                alertBox.classList.remove('alert-success', 'alert-danger');
                alertBox.classList.add('alert-' + type);
                alertText.textContent = message;
                alertBox.style.display = 'block';
            }

            function updateTable(page) {
                var startIndex = (page - 1) * rowsPerPage;
                var endIndex = startIndex + rowsPerPage;
                var slicedAnnouncements = announcements.slice(startIndex, endIndex);

                updateTableContent(slicedAnnouncements);
            }

            function updateTableContent(filteredAnnouncements) {
                var tableBody = document.querySelector("#announcementsTable tbody");
                tableBody.innerHTML = '';

                filteredAnnouncements.forEach(function (announcement) {
                    var row = document.createElement('tr');
                    row.innerHTML = `
                                <td>${announcement.AnnouncementId}</td>
                                <td>${announcement.SubjectId}</td>
                                <td>${announcement.StaffId}</td>
                                <td>${announcement.ClassId}</td>
                                <td>${announcement.Title}</td>
                                <td>${announcement.Description}</td>
                                <td>${announcement.Image}</td>
                                <td>${moment(announcement.Date).format('DD-MM-YYYY')}</td>
                                <td>${announcement.Url}</td>
                                <td>${announcement.Category}</td>
                                <td>${announcement.Status}</td>
                                <td>
                                    <a href="/Announcements/Details/${announcement.AnnouncementId}"><i class="fa fa-eye text-primary"></i>Details</a> |
                                    <a href="/Announcements/Edit/${announcement.AnnouncementId}"><i class="fa fa-pencil text-warning"></i>Edit</a> |
                                    <a href="/Announcements/Delete/${announcement.AnnouncementId}"><i class="fa fa-trash text-danger"></i>Delete</a>
                                </td>
                            `;
                    tableBody.appendChild(row);
                });

                updatePagination();
            }

            function updatePagination() {
                var pagination = document.getElementById('pagination');
                var totalPages = Math.ceil(announcements.length / rowsPerPage);
                var currentPage = parseInt(pagination.querySelector('.page-item.active')?.textContent) || 1;

                pagination.innerHTML = `
                            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}" id="previousPage">
                                <a class="page-link" href="#" aria-label="Previous" data-page="${currentPage - 1}">
                                    <span aria-hidden="true">&laquo;</span>
                                    <span class="sr-only">Previous</span>
                                </a>
                            </li>
                        `;

                for (var page = 1; page <= totalPages; page++) {
                    pagination.innerHTML += `
                                <li class="page-item ${page === currentPage ? 'active' : ''}">
                                    <a class="page-link" href="#" data-page="${page}">${page}</a>
                                </li>
                            `;
                }

                pagination.innerHTML += `
                            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}" id="nextPage">
                                <a class="page-link" href="#" aria-label="Next" data-page="${currentPage + 1}">
                                    <span aria-hidden="true">&raquo;</span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </li>
                        `;
            }

            function searchAnnouncements() {
                var searchInput = document.getElementById('searchInput').value.toLowerCase();
                var filteredAnnouncements = announcements.filter(function (announcement) {
                    return announcement.title.toLowerCase().includes(searchInput) ||
                        announcement.description.toLowerCase().includes(searchInput) ||
                        announcement.category.toLowerCase().includes(searchInput) ||
                        announcement.status.toLowerCase().includes(searchInput);
                });

                updateTableContent(filteredAnnouncements);
            }

            // Event listeners
            document.getElementById('searchInput').addEventListener('input', searchAnnouncements);

            document.getElementById('pagination').addEventListener('click', function (event) {
                event.preventDefault();
                var page = event.target.getAttribute('data-page');
                if (page) {
                    updateTable(parseInt(page));
                }
            });

            updateTable(currentPage);
        });
    </script>
}
